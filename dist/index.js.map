{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {StringArray} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - array data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\t// Pass-through options...\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar isReadOnly = require( '@stdlib/ndarray-base-assert-is-read-only' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar filledBy = require( '@stdlib/array-base-filled-by' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar join = require( '@stdlib/array-base-join' );\nvar nullaryStrided = require( '@stdlib/strided-base-nullary' );\nvar unary = require( '@stdlib/ndarray-base-unary' );\nvar broadcast = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar unaryOutputDataType = require( '@stdlib/ndarray-base-unary-output-dtype' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Constructor for creating ndarrays filled with pseudorandom values drawn from a unary PRNG.\n*\n* @constructor\n* @param {Function} prng - unary pseudorandom value generator\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} [options] - function options\n* @param {string} [options.order] - default memory layout\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Random} instance\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction Random( prng, idtypes, odtypes, policies, options ) {\n\tvar opts;\n\tif ( !( this instanceof Random ) ) {\n\t\tif ( arguments.length < 5 ) {\n\t\t\treturn new Random( prng, idtypes, odtypes, policies );\n\t\t}\n\t\treturn new Random( prng, idtypes, odtypes, policies, options );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\topts = {\n\t\t'order': defaults.get( 'order' )\n\t};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t\tif ( !isOrder( opts.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', opts.order ) );\n\t\t\t}\n\t\t}\n\t}\n\tthis._prng = prng;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output\n\t};\n\tthis._opts = opts;\n\treturn this;\n}\n\n/**\n* Returns an ndarray filled with pseudorandom values drawn from a unary PRNG.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - output shape\n* @param {(ndarrayLike|*)} param1 - PRNG parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output ndarray data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( shape, param1, options ) {\n\tvar prng;\n\tvar opts;\n\tvar buf;\n\tvar err;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\tvar out;\n\tvar set;\n\tvar dt;\n\tvar st;\n\tvar sh;\n\tvar p1;\n\n\tif ( !isNonNegativeIntegerArray( shape ) && !isEmptyCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Check whether we've been provided a scalar PRNG parameter...\n\tif ( isNumber( param1 ) ) {\n\t\tp1 = param1;\n\t\tdt = 'float64';\n\t\tFLG = true;\n\t} else if ( isComplexLike( param1 ) ) {\n\t\tp1 = param1;\n\t\tif ( p1.byteLength === 8 ) {\n\t\t\tdt = 'complex64';\n\t\t} else {\n\t\t\tdt = 'complex128';\n\t\t}\n\t\tFLG = true;\n\t} else if ( isndarrayLike( param1 ) ) {\n\t\tdt = getDType( param1 );\n\t\tsh = getShape( param1 );\n\n\t\t// Check whether the PRNG parameter is a zero-dimensional array...\n\t\tif ( sh.length === 0 ) {\n\t\t\tp1 = param1.get();\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\t// Broadcast the PRNG parameter to the desired shape:\n\t\t\tp1 = broadcast( param1, shape ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t\tFLG = false;\n\t\t}\n\t} else {\n\t\tp1 = param1;\n\t\tdt = 'generic';\n\t\tFLG = true;\n\t}\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes, '\", \"' ), dt ) );\n\t}\n\tprng = this._prng;\n\tdt = opts.dtype || unaryOutputDataType( dt, this._policies.output );\n\tif ( opts.order ) {\n\t\tord = opts.order;\n\t} else if ( FLG ) {\n\t\tord = this._opts.order;\n\t} else {\n\t\tord = getOrder( p1 );\n\t}\n\t// Handles special cases involving (1) zero-dimensional output ndarrays and (2) shapes having at least one dimension of size zero...\n\tlen = numel( shape );\n\tif ( len === 0 ) {\n\t\t// Check for a zero-dimensional shape...\n\t\tif ( shape.length === 0 ) {\n\t\t\t// If the output array is a zero-dimensional ndarray, we generate a single random variate...\n\t\t\tbuf = buffer( dt, 1 );\n\t\t\tif ( isAccessorArray( buf ) ) {\n\t\t\t\tset = accessorSetter( dt );\n\t\t\t} else {\n\t\t\t\tset = setter( dt );\n\t\t\t}\n\t\t\tset( buf, 0, prng( p1 ) );\n\t\t\tst = [ 0 ];\n\t\t} else {\n\t\t\t// If the output array has one or more dimensions of size zero, we avoid allocating any memory, and instead return an empty ndarray...\n\t\t\tbuf = buffer( dt, len );\n\t\t\tst = shape2strides( shape, ord );\n\t\t}\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// If provided a scalar PRNG parameter, we can simply fill a linear buffer with pseudorandom values (as all pseudorandom values are drawn from the same PRNG) and then wrap as an ndarray...\n\tif ( FLG ) {\n\t\tif ( dt === 'generic' ) {\n\t\t\tbuf = filledBy( len, wrapper );\n\t\t} else {\n\t\t\tbuf = buffer( dt, len );\n\t\t\tnullaryStrided( [ buf ], [ len ], [ 1 ], wrapper );\n\t\t}\n\t\tst = shape2strides( shape, ord );\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// We've been provided an ndarray, so we need to perform element-wise iteration...\n\n\t// Allocate a data buffer:\n\tbuf = buffer( dt, len );\n\n\t// Initialize the output array:\n\tst = shape2strides( shape, ord );\n\tout = new ndarray( dt, buf, shape, st, 0, ord, opts );\n\n\t// Fill the output array with pseudorandom values:\n\tunary( [ p1, out ], prng );\n\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom number generator function.\n\t*\n\t* @private\n\t* @returns {(number|ComplexLike)} pseudorandom number\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( p1 );\n\t}\n});\n\n/**\n* Fills an ndarray with pseudorandom values drawn from a unary PRNG.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {(ndarrayLike|*)} param1 - PRNG parameter\n* @param {ndarrayLike} out - output ndarray\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} must provide valid PRNG parameters\n* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} output ndarray\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, out ) {\n\tvar pdt;\n\tvar odt;\n\tvar p1;\n\tif ( !isndarrayLike( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', out ) );\n\t}\n\tif ( isReadOnly( out ) ) {\n\t\tthrow new Error( 'invalid argument. The output ndarray must be writable. Cannot write to a read-only ndarray.' );\n\t}\n\t// Check whether we've been provided a scalar PRNG parameter...\n\tif ( isNumber( param1 ) ) {\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tpdt = 'float64';\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t} else if ( isComplexLike( param1 ) ) {\n\t\tif ( param1.byteLength === 8 ) {\n\t\t\tpdt = 'complex64';\n\t\t} else {\n\t\t\tpdt = 'complex128';\n\t\t}\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t} else if ( isndarrayLike( param1 ) ) {\n\t\t// Broadcast the PRNG parameter to the desired shape:\n\t\tpdt = getDType( param1 );\n\t\tp1 = broadcast( param1, getShape( out ) ); // delegate to `broadcast` to ensure broadcast compatibility\n\t} else {\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tpdt = 'generic';\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t}\n\tif ( !contains( this._idtypes, pdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes, '\", \"' ), pdt ) );\n\t}\n\todt = getDType( out );\n\tif ( !contains( this._odtypes, odt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._odtypes, '\", \"' ), odt ) );\n\t}\n\t// Fill the output array with pseudorandom values:\n\tunary( [ p1, out ], this._prng );\n\n\treturn out;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Random;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for creating ndarrays filled with pseudorandom values drawn from a unary PRNG.\n*\n* @module @stdlib/random-tools-unary\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n* var Random = require( '@stdlib/random-tools-unary' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n* var Random = require( '@stdlib/random-tools-unary' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "contains", "join", "format", "validate", "opts", "dtypes", "options", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNonNegativeIntegerArray", "isEmptyCollection", "isndarrayLike", "isNumber", "isFunction", "isComplexLike", "isPlainObject", "isObject", "isCollection", "isDataType", "isOutputDataTypePolicy", "isReadOnly", "isOrder", "hasOwnProp", "contains", "filledBy", "everyBy", "join", "nullaryStrided", "unary", "broadcast", "broadcastScalar", "shape2strides", "unaryOutputDataType", "numel", "buffer", "getShape", "getDType", "getOrder", "ndarray", "defaults", "isAccessorArray", "accessorSetter", "setter", "format", "validate", "Random", "prng", "idtypes", "odtypes", "policies", "options", "opts", "shape", "param1", "buf", "err", "len", "ord", "FLG", "out", "set", "dt", "st", "sh", "p1", "wrapper", "pdt", "odt", "main"]
}
