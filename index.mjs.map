{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isFunction from '@stdlib/assert-is-function';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport filledBy from '@stdlib/array-base-filled-by';\nimport everyBy from '@stdlib/array-base-every-by';\nimport join from '@stdlib/array-base-join';\nimport nullaryStrided from '@stdlib/strided-base-nullary';\nimport unary from '@stdlib/ndarray-base-unary';\nimport broadcast from '@stdlib/ndarray-base-maybe-broadcast-array';\nimport broadcastScalar from '@stdlib/ndarray-base-broadcast-scalar';\nimport shape2strides from '@stdlib/ndarray-base-shape2strides';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport numel from '@stdlib/ndarray-base-numel';\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport getShape from '@stdlib/ndarray-shape';\nimport getDType from '@stdlib/ndarray-dtype';\nimport getOrder from '@stdlib/ndarray-order';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport setter from '@stdlib/array-base-setter';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Constructor for creating ndarrays filled with pseudorandom numbers drawn from a single-parameter probability distribution.\n*\n* @constructor\n* @param {Function} prng - unary pseudorandom number generator\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} [options] - function options\n* @param {string} [options.order] - default memory layout\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Random} instance\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction Random( prng, idtypes, odtypes, policies, options ) {\n\tvar opts;\n\tif ( !( this instanceof Random ) ) {\n\t\tif ( arguments.length < 5 ) {\n\t\t\treturn new Random( prng, idtypes, odtypes, policies );\n\t\t}\n\t\treturn new Random( prng, idtypes, odtypes, policies, options );\n\t}\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'null3c', prng ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'null43', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\topts = {\n\t\t'order': defaults.get( 'order' )\n\t};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\topts.order = options.order;\n\t\t\tif ( !isOrder( opts.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', opts.order ) );\n\t\t\t}\n\t\t}\n\t}\n\tthis._prng = prng;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output\n\t};\n\tthis._opts = opts;\n\treturn this;\n}\n\n/**\n* Returns an ndarray filled with pseudorandom numbers drawn from a probability distribution.\n*\n* @name generate\n* @memberof Random.prototype\n* @type {Function}\n* @param {NonNegativeIntegerArray} shape - output shape\n* @param {(number|ComplexLike|ndarrayLike)} param1 - distribution parameter\n* @param {Options} [options] - function options\n* @param {string} [options.dtype] - output ndarray data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n* @throws {TypeError} first argument must be a valid shape\n* @throws {TypeError} must provide valid distribution parameters\n* @throws {TypeError} distribution parameters and the desired shape must be broadcast compatible\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var v = rand.generate( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*/\nsetReadOnly( Random.prototype, 'generate', function generate( shape, param1, options ) {\n\tvar prng;\n\tvar opts;\n\tvar buf;\n\tvar err;\n\tvar len;\n\tvar ord;\n\tvar FLG;\n\tvar out;\n\tvar set;\n\tvar dt;\n\tvar st;\n\tvar sh;\n\tvar p1;\n\n\tif ( !isNonNegativeIntegerArray( shape ) && !isEmptyCollection( shape ) ) {\n\t\tthrow new TypeError( format( 'null5o', shape ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Check whether we've been provided a scalar distribution parameter...\n\tif ( isNumber( param1 ) ) {\n\t\tp1 = param1;\n\t\tdt = 'float64';\n\t\tFLG = true;\n\t} else if ( isComplexLike( param1 ) ) {\n\t\tp1 = param1;\n\t\tif ( p1.byteLength === 8 ) {\n\t\t\tdt = 'complex64';\n\t\t} else {\n\t\t\tdt = 'complex128';\n\t\t}\n\t\tFLG = true;\n\t} else if ( isndarrayLike( param1 ) ) {\n\t\tdt = getDType( param1 );\n\t\tsh = getShape( param1 );\n\n\t\t// Check whether the distribution parameter is a zero-dimensional array...\n\t\tif ( sh.length === 0 ) {\n\t\t\tp1 = param1.get();\n\t\t\tFLG = true;\n\t\t} else {\n\t\t\t// Broadcast the distribution parameter to the desired shape:\n\t\t\tp1 = broadcast( param1, shape ); // delegate to `broadcast` to ensure broadcast compatibility\n\t\t\tFLG = false;\n\t\t}\n\t} else {\n\t\tthrow new TypeError( format( 'nullEI', param1 ) );\n\t}\n\tif ( !contains( this._idtypes, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes, '\", \"' ), dt ) );\n\t}\n\tprng = this._prng;\n\tdt = opts.dtype || unaryOutputDataType( dt, this._policies.output );\n\tif ( opts.order ) {\n\t\tord = opts.order;\n\t} else if ( FLG ) {\n\t\tord = this._opts.order;\n\t} else {\n\t\tord = getOrder( p1 );\n\t}\n\t// Handles special cases involving (1) zero-dimensional output ndarrays and (2) shapes having at least one dimension of size zero...\n\tlen = numel( shape );\n\tif ( len === 0 ) {\n\t\t// Check for a zero-dimensional shape...\n\t\tif ( shape.length === 0 ) {\n\t\t\t// If the output array is a zero-dimensional ndarray, we generate a single random variate...\n\t\t\tbuf = buffer( dt, 1 );\n\t\t\tif ( isAccessorArray( buf ) ) {\n\t\t\t\tset = accessorSetter( dt );\n\t\t\t} else {\n\t\t\t\tset = setter( dt );\n\t\t\t}\n\t\t\tset( buf, 0, prng( p1 ) );\n\t\t\tst = [ 0 ];\n\t\t} else {\n\t\t\t// If the output array has one or more dimensions of size zero, we avoid allocating any memory, and instead return an empty ndarray...\n\t\t\tbuf = buffer( dt, len );\n\t\t\tst = shape2strides( shape, ord );\n\t\t}\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// If provided a scalar distribution parameter, we can simply fill a linear buffer with pseudorandom numbers (as all pseudorandom numbers are drawn from the same distribution) and then wrap as an ndarray...\n\tif ( FLG ) {\n\t\tif ( dt === 'generic' ) {\n\t\t\tbuf = filledBy( len, wrapper );\n\t\t} else {\n\t\t\tbuf = buffer( dt, len );\n\t\t\tnullaryStrided( [ buf ], [ len ], [ 1 ], wrapper );\n\t\t}\n\t\tst = shape2strides( shape, ord );\n\t\treturn new ndarray( dt, buf, shape, st, 0, ord, opts );\n\t}\n\t// We've been provided an ndarray, so we need to perform element-wise iteration...\n\n\t// Allocate a data buffer:\n\tbuf = buffer( dt, len );\n\n\t// Initialize the output array:\n\tst = shape2strides( shape, ord );\n\tout = new ndarray( dt, buf, shape, st, 0, ord, opts );\n\n\t// Fill the output array with pseudorandom numbers:\n\tunary( [ p1, out ], prng );\n\n\treturn out;\n\n\t/**\n\t* Applies parameters to a pseudorandom number generator function.\n\t*\n\t* @private\n\t* @returns {(number|ComplexLike)} pseudorandom number\n\t*/\n\tfunction wrapper() {\n\t\treturn prng( param1 );\n\t}\n});\n\n/**\n* Fills an ndarray with pseudorandom numbers drawn from a probability distribution.\n*\n* @name assign\n* @memberof Random.prototype\n* @type {Function}\n* @param {(number|ComplexLike|ndarrayLike)} param1 - distribution parameter\n* @param {ndarrayLike} out - output ndarray\n* @throws {TypeError} second argument must be an ndarray\n* @throws {TypeError} must provide valid distribution parameters\n* @throws {TypeError} distribution parameters and the output ndarray must be broadcast compatible\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} output ndarray\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var rand = new Random( exponential, idt, odt, policies, options );\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nsetReadOnly( Random.prototype, 'assign', function assign( param1, out ) {\n\tvar pdt;\n\tvar odt;\n\tvar p1;\n\tif ( !isndarrayLike( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', out ) );\n\t}\n\tif ( isReadOnly( out ) ) {\n\t\tthrow new Error( format('null1g') );\n\t}\n\t// Check whether we've been provided a scalar distribution parameter...\n\tif ( isNumber( param1 ) ) {\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tpdt = 'float64';\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t} else if ( isComplexLike( param1 ) ) {\n\t\tif ( param1.byteLength === 8 ) {\n\t\t\tpdt = 'complex64';\n\t\t} else {\n\t\t\tpdt = 'complex128';\n\t\t}\n\t\t// Wrap the scalar in a broadcasted ndarray:\n\t\tp1 = broadcastScalar( param1, pdt, getShape( out ), getOrder( out ) );\n\t} else if ( isndarrayLike( param1 ) ) {\n\t\t// Broadcast the distribution parameter to the desired shape:\n\t\tpdt = getDType( param1 );\n\t\tp1 = broadcast( param1, getShape( out ) ); // delegate to `broadcast` to ensure broadcast compatibility\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a scalar or an ndarray-like object. Value: `%s`.', param1 ) );\n\t}\n\tif ( !contains( this._idtypes, pdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes, '\", \"' ), pdt ) );\n\t}\n\todt = getDType( out );\n\tif ( !contains( this._odtypes, odt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._odtypes, '\", \"' ), odt ) );\n\t}\n\t// Fill the output array with pseudorandom numbers:\n\tunary( [ p1, out ], this._prng );\n\n\treturn out;\n});\n\n\n// EXPORTS //\n\nexport default Random;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {StringArray} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {string} [options.dtype] - array data type\n* @param {string} [options.order] - memory layout (either row-major or column-major)\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, dtypes, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\t// Pass-through options...\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["Random","prng","idtypes","odtypes","policies","options","opts","this","arguments","length","isFunction","TypeError","format","isCollection","everyBy","isDataType","isObject","isOutputDataTypePolicy","output","order","defaults","get","isPlainObject","hasOwnProp","isOrder","_prng","_idtypes","_odtypes","_policies","_opts","setReadOnly","prototype","shape","param1","buf","err","len","ord","FLG","out","dt","st","p1","isNonNegativeIntegerArray","isEmptyCollection","dtypes","dtype","contains","join","mode","submode","readonly","validate","isNumber","isComplexLike","byteLength","isndarrayLike","getDType","getShape","broadcast","unaryOutputDataType","getOrder","numel","buffer","isAccessorArray","accessorSetter","setter","shape2strides","ndarray","filledBy","wrapper","nullaryStrided","unary","pdt","odt","isReadOnly","Error","broadcastScalar"],"mappings":"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"}